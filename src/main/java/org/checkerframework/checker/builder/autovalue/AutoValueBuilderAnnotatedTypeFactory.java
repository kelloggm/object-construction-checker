package org.checkerframework.checker.builder.autovalue;

import com.google.auto.value.AutoValue;
import com.sun.source.tree.*;
import java.lang.annotation.Annotation;
import java.util.*;
import java.util.stream.Collectors;
import javax.lang.model.element.AnnotationMirror;
import javax.lang.model.element.ExecutableElement;
import javax.lang.model.element.Modifier;
import javax.lang.model.element.Name;

import org.checkerframework.checker.builder.CalledMethodsAnnotatedTypeFactory;
import org.checkerframework.checker.builder.CalledMethodsUtil;
import org.checkerframework.checker.builder.TypesafeBuilderQualifierHierarchy;
import org.checkerframework.checker.builder.qual.*;
import org.checkerframework.com.google.common.collect.ImmutableSet;
import org.checkerframework.common.basetype.BaseAnnotatedTypeFactory;
import org.checkerframework.common.basetype.BaseTypeChecker;
import org.checkerframework.framework.type.AnnotatedTypeFactory;
import org.checkerframework.framework.type.AnnotatedTypeMirror;
import org.checkerframework.framework.type.treeannotator.ListTreeAnnotator;
import org.checkerframework.framework.type.treeannotator.TreeAnnotator;
import org.checkerframework.framework.util.MultiGraphQualifierHierarchy;
import org.checkerframework.framework.util.MultiGraphQualifierHierarchy.MultiGraphFactory;
import org.checkerframework.javacutil.AnnotationBuilder;
import org.checkerframework.javacutil.AnnotationUtils;
import org.checkerframework.javacutil.TreeUtils;

/** Responsible for placing appropriate annotations on Lombok builders. */
public class AutoValueBuilderAnnotatedTypeFactory extends BaseAnnotatedTypeFactory
    implements CalledMethodsAnnotatedTypeFactory {

  private final AnnotationMirror TOP, BOTTOM;

  public AutoValueBuilderAnnotatedTypeFactory(BaseTypeChecker checker) {
    super(checker);
    TOP = AnnotationBuilder.fromClass(elements, CalledMethodsTop.class);
    BOTTOM = AnnotationBuilder.fromClass(elements, CalledMethodsBottom.class);
    this.postInit();
  }

  @Override
  protected Set<Class<? extends Annotation>> createSupportedTypeQualifiers() {
    return new LinkedHashSet<>(
        Arrays.asList(
            CalledMethodsTop.class,
            CalledMethods.class,
            CalledMethodsBottom.class,
            CalledMethodsPredicate.class));
  }

  /** Creates a @CalledMethods annotation whose values are the given strings. */
  public AnnotationMirror createCalledMethods(final String... val) {
    return CalledMethodsUtil.createCalledMethodsImpl(TOP, processingEnv, val);
  }

  /**
   * Wrapper to accept a List of Strings instead of an array if that's convenient at the call site.
   */
  public AnnotationMirror createCalledMethods(final List<String> requiredProperties) {
    List<String> calledMethodNames =
        requiredProperties.stream()
            .map((prop) -> "set" + prop.substring(0, 1).toUpperCase() + prop.substring(1))
            .collect(Collectors.toList());
    return createCalledMethods(calledMethodNames.toArray(new String[0]));
  }

  @Override
  public TreeAnnotator createTreeAnnotator() {
    return new ListTreeAnnotator(
        super.createTreeAnnotator(), new AutoValueBuilderTreeAnnotator(this));
  }

  private class AutoValueBuilderTreeAnnotator extends TreeAnnotator {

    public AutoValueBuilderTreeAnnotator(AnnotatedTypeFactory atypeFactory) {
      super(atypeFactory);
    }

    //    @Override
    //    public Void visitClass(final ClassTree tree, final AnnotatedTypeMirror type) {
    //      System.out.println(tree);
    //      return super.visitClass(tree, type);
    //    }

    @Override
    public Void visitMethod(final MethodTree node, final AnnotatedTypeMirror type) {
      // TODO: Lombok @Generated builder classes should have the following type annotations placed
      // automatically:
      // on setters: @ReturnsReceiver as a decl annotation
      // on the finalizer (build()) method: @CalledMethods(A), where A is the set of lombok.@NonNull
      // fields

      ClassTree enclosingClass = TreeUtils.enclosingClass(getPath(node));

      //      System.out.println(node.getName().toString() + " is visited method in class " +
      // enclosingClass.getSimpleName());

      boolean inAutoValueBuilder = hasAnnotation(enclosingClass, AutoValue.Builder.class);

      // System.out.println("was " + enclosingClass.getSimpleName().toString() + " generated by
      // lombok? " + lombokGenerated);

      // if this class was generated by Lombok, then we know:
      // - is this a setter method? If so, we need to add an @ReturnsReceiver annotation
      // - is this the finalizer method? If so, we need to add an @CalledMethods annotation
      //   to its receiver
      if (inAutoValueBuilder) {
        // get the name of the method
        String methodName = node.getName().toString();

        ClassTree autoValueClass =
            TreeUtils.enclosingClass(getPath(enclosingClass).getParentPath());

        assert hasAnnotation(autoValueClass, AutoValue.class)
            : "class " + autoValueClass.getSimpleName() + " is missing @AutoValue annotation";

        System.out.println("builder method name " + methodName);

        if ("build".equals(methodName)) {
          // if its a finalizer, add the @CalledMethods annotation with the field names
          // to the receiver
          List<String> requiredProperties = getRequiredProperties(autoValueClass);
          VariableTree receiverTree = node.getReceiverParameter();
          AnnotationMirror newCalledMethodsAnno = createCalledMethods(requiredProperties);
          System.out.println(
              "adding this annotation "
                  + newCalledMethodsAnno
                  + " to the receiver of this method "
                  + methodName);

          ((AnnotatedTypeMirror.AnnotatedExecutableType)type).getReceiverType().addAnnotation(newCalledMethodsAnno);
//          System.out.println("receiver tree " + receiverTree);
//          getAnnotatedType(receiverTree).addAnnotation(newCalledMethodsAnno);
        } /*else if (isAVBuilderSetterMethod(node, enclosingClass)) {
            AnnotationMirror newReturnsReceiverAnno =
                AnnotationBuilder.fromClass(elements, ReturnsReceiver.class);
            System.out.println("adding @ReturnsReceiver to this method " + methodName);
            // gotta use this weird formulation b/c we're adding a declaration annotation, not
            // a type annotation
            // TODO check if it already has the annotation???
            // type.addAnnotation(newReturnsReceiverAnno);
            type.getAnnotations().add(newReturnsReceiverAnno);
          }*/
      }
      return super.visitMethod(node, type);
    }

    private boolean isAVBuilderSetterMethod(MethodTree node, ClassTree enclosingClass) {
      ExecutableElement executableElement = TreeUtils.elementFromDeclaration(node);
      // it should be an abstract method that returns the enclosing Builder type
      return executableElement.getModifiers().contains(Modifier.ABSTRACT)
          && TreeUtils.elementFromDeclaration(enclosingClass)
              .getQualifiedName()
              .contentEquals(executableElement.getReturnType().toString());
    }

    private List<String> getRequiredProperties(ClassTree autoValueClass) {
      List<String> requiredPropertyNames = new ArrayList<>();
      for (Tree member : autoValueClass.getMembers()) {
        if (member.getKind() == Tree.Kind.METHOD) {
          MethodTree methodTree = (MethodTree) member;
          // should be an instance method
          if (!methodTree.getModifiers().getFlags().contains(Modifier.STATIC)) {
            String name = methodTree.getName().toString();
            System.out.println(methodTree);
            if (!IGNORED_METHOD_NAMES.contains(name)
                && !methodTree.getReturnType().toString().equals("void")) {
              requiredPropertyNames.add(name);
            }
          }
        }
      }
      return requiredPropertyNames;
    }
  }

  private boolean hasAnnotation(ClassTree enclosingClass, Class<? extends Annotation> annotClass) {
    return enclosingClass.getModifiers().getAnnotations().stream()
        .map(TreeUtils::annotationFromAnnotationTree)
        .anyMatch(anm -> AnnotationUtils.areSameByClass(anm, annotClass));
  }

  @Override
  public MultiGraphQualifierHierarchy createQualifierHierarchy(MultiGraphFactory factory) {
    return new TypesafeBuilderQualifierHierarchy(factory, TOP, BOTTOM, this);
  }

  private static final ImmutableSet<String> IGNORED_METHOD_NAMES =
      ImmutableSet.of("equals", "hashCode", "toString", "<init>");
}
