package java.net;


import org.checkerframework.checker.objectconstruction.qual.*;
import org.checkerframework.common.returnsreceiver.qual.*;
import org.checkerframework.checker.calledmethods.qual.*;

//@AlwaysCall("close")
class Socket implements Closeable {
    Socket();
    Socket(Proxy arg0);
    protected Socket(SocketImpl arg0) throws SocketException;
    Socket(String arg0, int arg1) throws UnknownHostException, IOException;
    Socket(InetAddress arg0, int arg1) throws IOException;
    Socket(String arg0, int arg1, InetAddress arg2, int arg3) throws IOException;
    Socket(InetAddress arg0, int arg1, InetAddress arg2, int arg3) throws IOException;
    @java.lang.Deprecated
Socket(String arg0, int arg1, boolean arg2) throws IOException;
    @java.lang.Deprecated
Socket(InetAddress arg0, int arg1, boolean arg2) throws IOException;
    void connect(SocketAddress arg0) throws IOException;
    void connect(SocketAddress arg0, int arg1) throws IOException;
    void bind(SocketAddress arg0) throws IOException;
    InetAddress getInetAddress();
    InetAddress getLocalAddress();
    int getPort();
    int getLocalPort();
    SocketAddress getRemoteSocketAddress();
    SocketAddress getLocalSocketAddress();
    SocketChannel getChannel();
    InputStream getInputStream() throws IOException;
    OutputStream getOutputStream() throws IOException;
    void setTcpNoDelay(boolean arg0) throws SocketException;
    boolean getTcpNoDelay() throws SocketException;
    void setSoLinger(boolean arg0, int arg1) throws SocketException;
    int getSoLinger() throws SocketException;
    void sendUrgentData(int arg0) throws IOException;
    void setOOBInline(boolean arg0) throws SocketException;
    boolean getOOBInline() throws SocketException;
    void setSoTimeout(int arg0) throws SocketException;
    int getSoTimeout() throws SocketException;
    void setSendBufferSize(int arg0) throws SocketException;
    int getSendBufferSize() throws SocketException;
    void setReceiveBufferSize(int arg0) throws SocketException;
    int getReceiveBufferSize() throws SocketException;
    void setKeepAlive(boolean arg0) throws SocketException;
    boolean getKeepAlive() throws SocketException;
    void setTrafficClass(int arg0) throws SocketException;
    int getTrafficClass() throws SocketException;
    void setReuseAddress(boolean arg0) throws SocketException;
    boolean getReuseAddress() throws SocketException;
    void close() throws IOException;
    void shutdownInput() throws IOException;
    void shutdownOutput() throws IOException;
    String toString();
    boolean isConnected();
    boolean isBound();
    boolean isClosed();
    boolean isInputShutdown();
    boolean isOutputShutdown();
    static void setSocketImplFactory(SocketImplFactory arg0) throws IOException;
    void setPerformancePreferences(int arg0, int arg1, int arg2);
    <T> Socket setOption(SocketOption<T> arg0, T arg1) throws IOException;
    <T> T getOption(SocketOption<T> arg0) throws IOException;
    Set<SocketOption<?>> supportedOptions();
}



//@AlwaysCall("close")
class ServerSocket implements Closeable {
    ServerSocket() throws IOException;
    ServerSocket(int arg0) throws IOException;
    ServerSocket(int arg0, int arg1) throws IOException;
    ServerSocket(int arg0, int arg1, InetAddress arg2) throws IOException;
    void bind(SocketAddress arg0) throws IOException;
    void bind(SocketAddress arg0, int arg1) throws IOException;
    InetAddress getInetAddress();
    int getLocalPort();
    SocketAddress getLocalSocketAddress();
    @Owning Socket accept() throws IOException;
    protected void implAccept(Socket arg0) throws IOException;
    void close() throws IOException;
    ServerSocketChannel getChannel();
    boolean isBound();
    boolean isClosed();
    void setSoTimeout(int arg0) throws SocketException;
    int getSoTimeout() throws IOException;
    void setReuseAddress(boolean arg0) throws SocketException;
    boolean getReuseAddress() throws SocketException;
    String toString();
    static void setSocketFactory(SocketImplFactory arg0) throws IOException;
    void setReceiveBufferSize(int arg0) throws SocketException;
    int getReceiveBufferSize() throws SocketException;
    void setPerformancePreferences(int arg0, int arg1, int arg2);
    <T> ServerSocket setOption(SocketOption<T> arg0, T arg1) throws IOException;
    <T> T getOption(SocketOption<T> arg0) throws IOException;
    Set<SocketOption<?>> supportedOptions();
}


package javax.net.ssl;

import org.checkerframework.checker.objectconstruction.qual.*;
import org.checkerframework.common.returnsreceiver.qual.*;
import org.checkerframework.checker.calledmethods.qual.*;

class SSLSocketFactory extends SocketFactory {
    Socket createSocket(@Owning Socket arg0, String arg1, int arg2, boolean arg3) throws IOException;
    Socket createSocket(@Owning Socket arg0, InputStream arg1, boolean arg2) throws IOException;
}

package javax.net;

class SocketFactory {
    @Owning Socket createSocket() throws IOException;
    @Owning Socket createSocket(String arg0, int arg1) throws IOException, UnknownHostException;
    @Owning Socket createSocket(String arg0, int arg1, InetAddress arg2, int arg3) throws IOException, UnknownHostException;
    @Owning Socket createSocket(InetAddress arg0, int arg1) throws IOException;
    @Owning Socket createSocket(InetAddress arg0, int arg1, InetAddress arg2, int arg3) throws IOException;
}

class ServerSocketFactory {
    protected ServerSocketFactory();
    static ServerSocketFactory getDefault();
    @Owning ServerSocket createServerSocket() throws IOException;
    @Owning ServerSocket createServerSocket(int arg0) throws IOException;
    @Owning ServerSocket createServerSocket(int arg0, int arg1) throws IOException;
    @Owning ServerSocket createServerSocket(int arg0, int arg1, InetAddress arg2) throws IOException;
}


package java.io;

import org.checkerframework.checker.objectconstruction.qual.*;
import org.checkerframework.common.returnsreceiver.qual.*;
import org.checkerframework.checker.calledmethods.qual.*;

@AlwaysCall("close")
public interface Closeable {
    void close() throws Exception;
}

package java.lang;

import org.checkerframework.checker.objectconstruction.qual.*;
import org.checkerframework.common.returnsreceiver.qual.*;
import org.checkerframework.checker.calledmethods.qual.*;

// This produces too much noise, for now. Investigate it later.
// @AlwaysCall("close")
public interface AutoCloseable {
    void close() throws Exception;
}