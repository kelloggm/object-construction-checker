package java.net;

import org.checkerframework.checker.mustcall.qual.*;
import org.checkerframework.checker.objectconstruction.qual.*;
import org.checkerframework.common.returnsreceiver.qual.*;

package java.nio.channels;

class SelectionKey {
    @NotOwning SelectableChannel channel();
}

class FileChannel {
    @NotOwning FileChannel position(long arg0) throws IOException;
    @NotOwning FileChannel truncate(long arg0) throws IOException;
}

class SocketChannel extends AbstractSelectableChannel implements ByteChannel, ScatteringByteChannel, GatheringByteChannel, NetworkChannel {
    protected SocketChannel(SelectorProvider arg0);
    static SocketChannel open() throws IOException;
    static SocketChannel open(SocketAddress arg0) throws IOException;
    int validOps();
    SocketChannel bind(SocketAddress arg0) throws IOException;
    <T> SocketChannel setOption(SocketOption<T> arg0, T arg1) throws IOException;
    SocketChannel shutdownInput() throws IOException;
    SocketChannel shutdownOutput() throws IOException;
    @MustCallChoice Socket socket(@MustCallChoice SocketChannel this);
    boolean isConnected();
    boolean isConnectionPending();
    boolean connect(SocketAddress arg0) throws IOException;
    boolean finishConnect() throws IOException;
    SocketAddress getRemoteAddress() throws IOException;
    int read(ByteBuffer arg0) throws IOException;
    long read(ByteBuffer[] arg0, int arg1, int arg2) throws IOException;
    long read(ByteBuffer[] arg0) throws IOException;
    int write(ByteBuffer arg0) throws IOException;
    long write(ByteBuffer[] arg0, int arg1, int arg2) throws IOException;
    long write(ByteBuffer[] arg0) throws IOException;
    SocketAddress getLocalAddress() throws IOException;
}

class ServerSocketChannel extends AbstractSelectableChannel implements NetworkChannel {
    protected ServerSocketChannel(SelectorProvider arg0);
    static ServerSocketChannel open() throws IOException;
    int validOps();
    ServerSocketChannel bind(SocketAddress arg0) throws IOException;
    ServerSocketChannel bind(SocketAddress arg0, int arg1) throws IOException;
    <T> ServerSocketChannel setOption(SocketOption<T> arg0, T arg1) throws IOException;
    @MustCallChoice ServerSocket socket(@MustCallChoice ServerSocketChannel this);
    SocketChannel accept() throws IOException;
    SocketAddress getLocalAddress() throws IOException;
}

package java.nio.channels.spi;

class AbstractSelectableChannel {
    @MustCallChoice SelectableChannel configureBlocking(@MustCallChoice AbstractSelectableChannel this, boolean b);
}
