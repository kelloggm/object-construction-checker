package java.net;

import org.checkerframework.checker.mustcall.qual.*;
import org.checkerframework.checker.objectconstruction.qual.*;
import org.checkerframework.common.returnsreceiver.qual.*;

package java.nio.channels;

class SelectionKey {
    @NotOwning SelectableChannel channel();
}

class FileChannel {
    @NotOwning FileChannel position(long arg0) throws IOException;
    @NotOwning FileChannel truncate(long arg0) throws IOException;
}

class SocketChannel extends AbstractSelectableChannel implements ByteChannel, ScatteringByteChannel, GatheringByteChannel, NetworkChannel {
    protected SocketChannel(SelectorProvider arg0);
    static @MustCall({}) SocketChannel open() throws IOException;
    static SocketChannel open(SocketAddress arg0) throws IOException;
    @ResetMustCall("this")
    SocketChannel bind(SocketAddress arg0) throws IOException;
    @NotOwning SocketChannel shutdownInput() throws IOException;
    @NotOwning SocketChannel shutdownOutput() throws IOException;
    @MustCallChoice Socket socket(@MustCallChoice SocketChannel this);
}

class ServerSocketChannel extends AbstractSelectableChannel implements NetworkChannel {
    protected ServerSocketChannel(SelectorProvider arg0);
    static @MustCall({}) ServerSocketChannel open() throws IOException;
    int validOps();
    @ResetMustCall("this")
    @MustCallChoice ServerSocketChannel bind(@MustCallChoice ServerSocketChannel this, SocketAddress arg0) throws IOException;
    @ResetMustCall("this")
    @MustCallChoice ServerSocketChannel bind(@MustCallChoice ServerSocketChannel this, SocketAddress arg0, int arg1) throws IOException;
    <T> ServerSocketChannel setOption(SocketOption<T> arg0, T arg1) throws IOException;
    @MustCallChoice ServerSocket socket(@MustCallChoice ServerSocketChannel this);
    @MustCallChoice SocketChannel accept(@MustCallChoice ServerSocketChannel this) throws IOException;
    SocketAddress getLocalAddress() throws IOException;
}

package java.nio.channels.spi;

class AbstractSelectableChannel {
    @MustCallChoice @This SelectableChannel configureBlocking(@MustCallChoice AbstractSelectableChannel this, boolean b);
}

class AbstractInterruptibleChannel {
    @EnsuresCalledMethodsIf(expression="this", result=false, methods={"close"})
    boolean isOpen(AbstractInterruptibleChannel this);
}

package javax.servlet;

interface ServletResponse {
    // The link below justifies why these annotations are correct
    // https://stackoverflow.com/questions/1159168/should-one-call-close-on-httpservletresponse-getoutputstream-getwriter
    @NotOwning ServletOutputStream getOutputStream() throws IOException;
    @NotOwning PrintWriter getWriter() throws IOException;
}
