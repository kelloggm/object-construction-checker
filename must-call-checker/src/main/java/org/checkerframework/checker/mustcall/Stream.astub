package java.io;

import org.checkerframework.checker.mustcall.qual.*;
import org.checkerframework.checker.objectconstruction.qual.*;
import org.checkerframework.common.returnsreceiver.qual.*;

@MustCall("close")
class DataOutputStream extends FilterOutputStream implements DataOutput {
    protected int written;
    DataOutputStream(@Owning OutputStream arg0);
    void write(int arg0) throws IOException;
    void write(byte[] arg0, int arg1, int arg2) throws IOException;
    void flush() throws IOException;
    void writeBoolean(boolean arg0) throws IOException;
    void writeByte(int arg0) throws IOException;
    void writeShort(int arg0) throws IOException;
    void writeChar(int arg0) throws IOException;
    void writeInt(int arg0) throws IOException;
    void writeLong(long arg0) throws IOException;
    void writeFloat(float arg0) throws IOException;
    void writeDouble(double arg0) throws IOException;
    void writeBytes(String arg0) throws IOException;
    void writeChars(String arg0) throws IOException;
    void writeUTF(String arg0) throws IOException;
    int size();
}

@MustCall("close")
class OutputStream { }

@MustCall("close")
class InputStream { }

@MustCall("close")
class FilterOutputStream extends OutputStream {
    protected OutputStream out;
    FilterOutputStream(@Owning OutputStream arg0);
    void write(int arg0) throws IOException;
    void write(byte[] arg0) throws IOException;
    void write(byte[] arg0, int arg1, int arg2) throws IOException;
    void flush() throws IOException;
    void close() throws IOException;
}

@MustCall("close")
class PrintStream extends FilterOutputStream implements Appendable, Closeable {
    PrintStream(@Owning OutputStream arg0);
    PrintStream(@Owning OutputStream arg0, boolean arg1);
    PrintStream(@Owning OutputStream arg0, boolean arg1, String arg2) throws UnsupportedEncodingException;
    PrintStream(@Owning OutputStream arg0, boolean arg1, Charset arg2);
    public PrintStream(String arg0) throws FileNotFoundException;
    public PrintStream(String arg0, String arg1) throws FileNotFoundException, UnsupportedEncodingException;
    public PrintStream(String arg0, Charset arg1) throws IOException;
    PrintStream(File arg0) throws FileNotFoundException;
    PrintStream(File arg0, String arg1) throws FileNotFoundException, UnsupportedEncodingException;
    PrintStream(File arg0, Charset arg1) throws IOException;
    void flush();
    void close();
    boolean checkError();
    protected void setError();
    protected void clearError();
    void write(int arg0);
    void write(byte[] arg0, int arg1, int arg2);
    void print(boolean arg0);
    void print(char arg0);
    void print(int arg0);
    void print(long arg0);
    void print(float arg0);
    void print(double arg0);
    void print(char[] arg0);
    void print(@NotOwning String s);
    void print(@NotOwning Object arg0);
    void println();
    void println(boolean arg0);
    void println(char arg0);
    void println(int arg0);
    void println(long arg0);
    void println(float arg0);
    void println(double arg0);
    void println(char[] arg0);
    void println(@NotOwning String s);
    void println(@NotOwning Object arg0);
    PrintStream printf(@NotOwning String arg0, @NotOwning Object @NotOwning [] arg1);
    PrintStream printf(Locale arg0, @NotOwning String arg1, @NotOwning Object @NotOwning [] arg2);
    PrintStream format(@NotOwning String arg0, @NotOwning Object @NotOwning [] arg1);
    PrintStream format(Locale arg0, @NotOwning String arg1, @NotOwning Object @NotOwning [] arg2);
    @NotOwning PrintStream append(@NotOwning CharSequence arg0);
    @NotOwning PrintStream append(@NotOwning CharSequence arg0, int arg1, int arg2);
    @NotOwning PrintStream append(char arg0);
}

@MustCall("close")
class BufferedReader extends Reader {
    BufferedReader(@Owning Reader arg0, int arg1);
    BufferedReader(@Owning Reader arg0);
    int read() throws IOException;
    int read(char[] arg0, int arg1, int arg2) throws IOException;
    String readLine() throws IOException;
    long skip(long arg0) throws IOException;
    boolean ready() throws IOException;
    boolean markSupported();
    void mark(int arg0) throws IOException;
    void reset() throws IOException;
    void close() throws IOException;
    Stream<String> lines();
}

@MustCall("close")
class BufferedOutputStream extends FilterOutputStream {
    protected byte[] buf;
    protected int count;
    BufferedOutputStream(@Owning OutputStream arg0);
    BufferedOutputStream(@Owning OutputStream arg0, int arg1);
    void write(int arg0) throws IOException;
    void write(byte[] arg0, int arg1, int arg2) throws IOException;
    void flush() throws IOException;
}

@MustCall("close")
class DataInputStream extends FilterInputStream implements DataInput {
    DataInputStream(@Owning InputStream arg0);
    int read(byte[] arg0) throws IOException;
    int read(byte[] arg0, int arg1, int arg2) throws IOException;
    void readFully(byte[] arg0) throws IOException;
    void readFully(byte[] arg0, int arg1, int arg2) throws IOException;
    int skipBytes(int arg0) throws IOException;
    boolean readBoolean() throws IOException;
    byte readByte() throws IOException;
    int readUnsignedByte() throws IOException;
    short readShort() throws IOException;
    int readUnsignedShort() throws IOException;
    char readChar() throws IOException;
    int readInt() throws IOException;
    long readLong() throws IOException;
    float readFloat() throws IOException;
    double readDouble() throws IOException;
    @java.lang.Deprecated
String readLine() throws IOException;
    String readUTF() throws IOException;
    static String readUTF(DataInput arg0) throws IOException;
}

@MustCall("close")
class FilterInputStream extends InputStream {
    protected InputStream in;
    protected FilterInputStream(@Owning InputStream arg0);
    int read() throws IOException;
    int read(byte[] arg0) throws IOException;
    int read(byte[] arg0, int arg1, int arg2) throws IOException;
    long skip(long arg0) throws IOException;
    int available() throws IOException;
    void close() throws IOException;
    void mark(int arg0);
    void reset() throws IOException;
    boolean markSupported();
}

@MustCall("close")
class BufferedInputStream extends FilterInputStream {
    protected byte[] buf;
    protected int count;
    protected int pos;
    protected int markpos;
    protected int marklimit;
    BufferedInputStream(@Owning InputStream arg0);
    BufferedInputStream(@Owning InputStream arg0, int arg1);
    int read() throws IOException;
    int read(byte[] arg0, int arg1, int arg2) throws IOException;
    long skip(long arg0) throws IOException;
    int available() throws IOException;
    void mark(int arg0);
    void reset() throws IOException;
    boolean markSupported();
    void close() throws IOException;
}

@MustCall("close")
class InputStreamReader extends Reader {
    InputStreamReader(@Owning InputStream arg0);
    InputStreamReader(@Owning InputStream arg0, String arg1) throws UnsupportedEncodingException;
    InputStreamReader(@Owning InputStream arg0, Charset arg1);
    InputStreamReader(@Owning InputStream arg0, CharsetDecoder arg1);
    String getEncoding();
    int read() throws IOException;
    int read(char[] arg0, int arg1, int arg2) throws IOException;
    boolean ready() throws IOException;
    void close() throws IOException;
}

@MustCall("close")
class BufferedWriter extends Writer {
    BufferedWriter(@Owning Writer arg0);
    BufferedWriter(@Owning Writer arg0, int arg1);
    void write(int arg0) throws IOException;
    void write(char[] arg0, int arg1, int arg2) throws IOException;
    void write(String arg0, int arg1, int arg2) throws IOException;
    void newLine() throws IOException;
    void flush() throws IOException;
    void close() throws IOException;
}

@MustCall("close")
class PrintWriter extends Writer {
    protected Writer out;
    PrintWriter(@Owning Writer arg0);
    PrintWriter(@Owning Writer arg0, boolean arg1);
    PrintWriter(@Owning OutputStream arg0);
    PrintWriter(@Owning OutputStream arg0, boolean arg1);
    PrintWriter(@Owning OutputStream arg0, boolean arg1, Charset arg2);
    PrintWriter(String arg0) throws FileNotFoundException;
    PrintWriter(String arg0, String arg1) throws FileNotFoundException, UnsupportedEncodingException;
    PrintWriter(String arg0, Charset arg1) throws IOException;
    PrintWriter(@Owning File arg0) throws FileNotFoundException;
    PrintWriter(@Owning File arg0, String arg1) throws FileNotFoundException, UnsupportedEncodingException;
    PrintWriter(@Owning File arg0, Charset arg1) throws IOException;
    void flush();
    void close();
    boolean checkError();
    protected void setError();
    protected void clearError();
    void write(int arg0);
    void write(char[] arg0, int arg1, int arg2);
    void write(char[] arg0);
    void write(String arg0, int arg1, int arg2);
    void write(String arg0);
    void print(boolean arg0);
    void print(char arg0);
    void print(int arg0);
    void print(long arg0);
    void print(float arg0);
    void print(double arg0);
    void print(char[] arg0);
    void print(String arg0);
    void print(Object arg0);
    void println();
    void println(boolean arg0);
    void println(char arg0);
    void println(int arg0);
    void println(long arg0);
    void println(float arg0);
    void println(double arg0);
    void println(char[] arg0);
    void println(String arg0);
    void println(Object arg0);
    PrintWriter printf(String arg0, Object[] arg1);
    PrintWriter printf(Locale arg0, String arg1, Object[] arg2);
    PrintWriter format(String arg0, Object[] arg1);
    PrintWriter format(Locale arg0, String arg1, Object[] arg2);
    PrintWriter append(CharSequence arg0);
    PrintWriter append(CharSequence arg0, int arg1, int arg2);
    PrintWriter append(char arg0);
}

@MustCall("close")
class OutputStreamWriter extends Writer {
    OutputStreamWriter(@Owning OutputStream arg0, String arg1) throws UnsupportedEncodingException;
    OutputStreamWriter(@Owning OutputStream arg0);
    OutputStreamWriter(@Owning OutputStream arg0, Charset arg1);
    OutputStreamWriter(@Owning OutputStream arg0, CharsetEncoder arg1);
    String getEncoding();
    void write(int arg0) throws IOException;
    void write(char[] arg0, int arg1, int arg2) throws IOException;
    void write(String arg0, int arg1, int arg2) throws IOException;
    Writer append(CharSequence arg0, int arg1, int arg2) throws IOException;
    Writer append(CharSequence arg0) throws IOException;
    void flush() throws IOException;
    void close() throws IOException;
}

@MustCall("close")
class Reader { }

@MustCall("close")
class Writer { }

package java.security;

import org.checkerframework.checker.objectconstruction.qual.*;
import org.checkerframework.common.returnsreceiver.qual.*;

@MustCall("close")
class DigestOutputStream extends FilterOutputStream {
    protected MessageDigest digest;
    DigestOutputStream(@Owning OutputStream arg0, MessageDigest arg1);
    MessageDigest getMessageDigest();
    void setMessageDigest(MessageDigest arg0);
    void write(int arg0) throws IOException;
    void write(byte[] arg0, int arg1, int arg2) throws IOException;
    void on(boolean arg0);
    String toString();
}



