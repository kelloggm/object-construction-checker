// Contains assumptions about reflection. In particular, this
// makes the results of reflection the default (i.e. bottom) type
// in the Must Call type system. This choice is technically unsound:
// if e.g. the java.net.Socket constructor is invoked via reflection,
// then our checker will fail to track it. For usability, we found it
// much more useful to ignore these warnings than to issue them.
// If you wish to see warnings related to reflection, remove this stub file
// when running the checker.

package java.lang.reflect;

import org.checkerframework.checker.mustcall.qual.MustCall;

class Constructor<T> {
    @MustCall({}) T newInstance(Object... initArgs);
}
