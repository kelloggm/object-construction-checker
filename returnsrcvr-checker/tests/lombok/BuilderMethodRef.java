// Generated by delombok at Wed Aug 07 09:35:52 PDT 2019

// A test for a false positive discovered in a case study.
import java.util.Optional;

class BuilderMethodRef {
	@lombok.NonNull
	String foo;
	Object bar;

	public static void test(Optional<Object> opt) {
		BuilderMethodRefBuilder b = builder().foo("Hello");
		opt.ifPresent(b::bar);
		b.build();
	}

	@java.lang.SuppressWarnings("all")
	@lombok.Generated
	BuilderMethodRef(@lombok.NonNull final String foo, final Object bar) {
		if (foo == null) {
			throw new java.lang.NullPointerException("foo is marked non-null but is null");
		}
		this.foo = foo;
		this.bar = bar;
	}


	@java.lang.SuppressWarnings("all")
	@lombok.Generated
	public static class BuilderMethodRefBuilder {
		@java.lang.SuppressWarnings("all")
		@lombok.Generated
		private String foo;
		@java.lang.SuppressWarnings("all")
		@lombok.Generated
		private Object bar;

		@java.lang.SuppressWarnings("all")
		@lombok.Generated
		BuilderMethodRefBuilder() {
		}

		@java.lang.SuppressWarnings("all")
		@lombok.Generated
		public BuilderMethodRefBuilder foo(@lombok.NonNull final String foo) {
			if (foo == null) {
				throw new java.lang.NullPointerException("foo is marked non-null but is null");
			}
			this.foo = foo;
			return this;
		}

		@java.lang.SuppressWarnings("all")
		@lombok.Generated
		public BuilderMethodRefBuilder bar(final Object bar) {
			this.bar = bar;
			return this;
		}

		@java.lang.SuppressWarnings("all")
		@lombok.Generated
		public BuilderMethodRef build() {
			return new BuilderMethodRef(foo, bar);
		}

		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@lombok.Generated
		public java.lang.String toString() {
			return "BuilderMethodRef.BuilderMethodRefBuilder(foo=" + this.foo + ", bar=" + this.bar + ")";
		}
	}

	@java.lang.SuppressWarnings("all")
	@lombok.Generated
	public static BuilderMethodRefBuilder builder() {
		return new BuilderMethodRefBuilder();
	}
}
